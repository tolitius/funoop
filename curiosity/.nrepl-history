(require '[curiosity.instrument.mast-camera])
(require '[curiosity.instrument.mast-camera :as mastcam])
(mastcam/connect)
(mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera})
(def mac (mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera}))
mac
(pprint mac)
(mastcam/auto-focus (:conn mac))
(def mac (mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera}))
mac
(mastcam/auto-focus (:conn mac))
(mastcam/zoom (:conn mac))
(mastcam/zoom (:conn mac) {:in 2.5})
(mastcam/zoom (:conn mac) {:out 2.5})
(def mac (mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera}))
mac
(def mac (mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera}))
(mastcam/zoom (:conn mac) {:out 2.5})
(mastcam/zoom (:conn mac) {:in 42.0})
(def mac (mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera}))
(mastcam/zoom (:conn mac) {:in 42.0})
(mastcam/zoom (:conn mac) {:out 2.5})
(mastcam/auto-focus (:conn mac) {:out 2.5})
(mastcam/auto-focus (:conn mac))
(mastcam/capture (:conn mac))
(def mac (mastcam/connect {:uri "cam://192.23.39.42" :type :medium-angle-camera}))
(def nac (mastcam/connect {:uri "cam://192.23.39.28" :type :narrow-angle-camera}))
(pprint mac)
(pprint nac)
mac
nac
(require '[curiosity.core])
(require '[curiosity.core :as cs])
(require '[curiosity.dsn :as dsn])
(dsn/connect)
(dsn/connect nil)
(require :reload '[curiosity.dsn :as dsn])
(dsn/connect nil)
(dsn/connect 42)
#'curiosity.dsn/deep-space
@#'curiosity.dsn/deep-space
@@#'curiosity.dsn/deep-space
(dsn/connect 42)
*e
(dsn/connect 42)
(require :reload '[curiosity.dsn :as dsn])
(def n (dsn/connect :foo))
(def n (dsn/connect {:station "dsn://tweedledee"}))
n
(def consumer (dsn/consume-events n #(println "received" %)))
(dsn/send-event n :blah)
(dsn/send-event n :bla)
(dsn/send-event consume :bla)
(dsn/send-event consumer :bla)
(dsn/send-event n :bla)
consume
consumer
(dsn/send-event (:stop consumer) :bla)
(dsn/send-event n :bla)
(dsn/send-event n :blah)
(dsn/send-event n :blahh)
(dsn/send-event n :blahhh)
(def consumer (dsn/consume-events n #(println "received" %)))
(dsn/send-event (:stop consumer) :bla)
(def n (dsn/connect {:station "dsn://tweedledee"}))
(def n (deep-space/connect {:station "dsn://tweedledee"}))
(curiosity/capture)
(curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"})
(slurp "1")
(slurp "./1")
(slurp "camera/1")
(slurp "dev/camera/1")
(slurp "1")
(slurp 1)
(curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"})
(get-env)
(pprint (get-env))
(curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"})
(slurp 1)
(slurp "1")
(set-env! :resource-paths #{"dev/camera"})
(slurp "1")
(set-env! :resource-paths #{"dev/camera/"})
(slurp "1")
(set-env! :resource-paths #{"dev"})
(set-env! :source-paths #{"src"})
(set-env! :resource-paths #{"dev"})
(slurp "1")
(slurp "camera/1")
(slurp "dev/camera/1")
(set-env! :resource-paths #{"dev" "dev/camera"})
(set-env! :resource-paths #{"dev" "camera"})
(set-env! :resource-paths #{"dev/camera"})
(slurp "1")
(pprint (get-env))
(set-env! :resource-paths #{""})
(set-env! :resource-paths #{"src"})
(slurp "1")
(set-env! :source-paths #{"dev/camera"})
(slurp "1")
(slurp "camera/1")
(slurp "dev/camera/1")
(set-env! :resource-paths #{"dev"})
(set-env! :resource-paths #{"src"})
(slurp "camera/1")
(slurp "1")
(set-env! :asset-paths #{"dev/camera"})
(slurp "1")
(set-env! :directories #{"dev/camera"})
(slurp "1")
(set-env! :directories #{"dev"})
(slurp "1")
(slurp "camera/1")
(set-env! :source-paths #(conj % "dev"))
(set-env! :asset-paths #(conj % "dev"))
(set-env! :resource-paths #(conj % "dev"))
(slurp "camera/1")
(slurp "1")
(slurp "resources/1")
(set-env! :resource-paths #(conj % "resources"))
(slurp "1")
(clojure.java.io/resource "1")
(slurp (clojure.java.io/resource "1"))
(clojure.java.io/resource "1")
(curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"})
(import java.util.Base64)
(defn decode [to-decode] (.decode (Base64/getDecoder) to-decode))
(slurp "dev/camera/1")
(decode (slurp "dev/camera/1"))
(decode (.getBytes (slurp "dev/camera/1")))
(.getBytes (slurp "dev/camera/1"))
(defn decode [to-decode] (.decode (Base64/geMimetDecoder) to-decode))
(defn decode [to-decode] (.decode (Base64/geMimeDecoder) to-decode))
(defn decode [to-decode] (.decode (Base64/getMimeDecoder) to-decode))
(decode (.getBytes (slurp "dev/camera/1")))
(doc spit)
(spit "here" (decode (.getBytes (slurp "dev/camera/1"))))
(spit "here" (str (decode (.getBytes (slurp "dev/camera/1")))))
(spit "here" (String. (decode (.getBytes (slurp "dev/camera/1")))))
(spit "here" (String. (decode (.getBytes (slurp "dev/camera/1"))) java.nio.charset.StandardCharsets/UTF_8))
(defn decode [to-decode] (.decode (Base64/getUrlDecoder) to-decode))
(spit "here.jpg" (String. (decode (.getBytes (slurp "dev/camera/1"))) java.nio.charset.StandardCharsets/UTF_8))
(spit "here.jpg" (String. (decode (.getBytes (slurp "dev/camera/1") StandardCharsets.UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
(spit "here.jpg" (String. (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets.UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
java.nio.charset.StandardCharsets
(spit "here.jpg" (String. (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
(defn decode [to-decode] (.decode (Base64/getMimeDecoder) to-decode))
(spit "here.jpg" (String. (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
(defn decode [to-decode] (.decode (Base64/getDecoder) to-decode))
(spit "here.jpg" (String. (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
(.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)
(defn save-image [image]
  (with-open [w (io/output-stream "here")]
    (.write w image)))
(require '[clojure.java.io :as io])
(defn save-image [image]
  (with-open [w (io/output-stream "here")]
    (.write w image)))
(def b (String. (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
(defn decode [to-decode] (.decode (Base64/getMimeDecoder) to-decode))
(def b (String. (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)) java.nio.charset.StandardCharsets/UTF_8))
b
(save-image b)
(io/copy (io/file "photos" 1 ".jpg") b)
(io/copy (io/file "photos.jpg") b)
(doc io/file)
(io/copy (io/file "." "photos.jpg") b)
(save-image (String. b ))
(save-image b)
(source save-image)
(defn save-image [image]
  (with-open [w (io/output-stream "here")]
    (.write w image)))
(/io)
(import '[java.nio.file Files])
(import '[java.nio.file Files Paths])
(Paths/get "." "here")
(Paths/get "" "here")
(Paths/get ["." "here"])
(Paths/get "/" "here")
(Paths/get "here")
(Paths/get "./here")
(Paths/get "." (into-array ["here"]))
((Paths/get "." (into-array ["here.jpg"])))
(def p (Paths/get "." (into-array ["here.jpg"])))
p
(Files/write p b)
b
(type b)
(def b (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)))
(Files/write p b)
(type b)
(type p)
(def p (Paths/get "." (into-array ["here.jpg"])))
p
(Files/write p (.getBytes ""))
*e
(Files/write 1 (.getBytes ""))
(Files/write 1 b)
(Files/write p b)
p
(def p (Paths/get "/Users/tolitius/1/fun/talks/jeeconf/2018/curiosity" (into-array ["here.jpg"])))
(type p)
(Files/write p b)
(Files/write p)
(Files/write b)
(Files/write p b 42)
(Files/write 42)
(Files/write)
(import '[java.nio.file Files Paths])
(type p)
(Files/write p (byte-array b))
(byte-array b)
(type (byte-array b))
(import javax.xml.bind DatatypeConverter)
(import [javax.xml.bind DatatypeConverter])
(DatatypeConverter/printBase64Binary(b))
(DatatypeConverter/printBase64Binary b)
(def a (DatatypeConverter/printBase64Binary b))
(DatatypeConverter/parseBase64Binary a)
(def b (DatatypeConverter/parseBase64Binary a))
(Files/write p b)
(spit "here.jpg" (String. b java.nio.charset.StandardCharsets/UTF_8))
(def a (DatatypeConverter/printBase64Binary (.getBytes (slurp "dev/camera/1"))))
(def b (DatatypeConverter/parseBase64Binary a))
(spit "here.jpg" (String. b java.nio.charset.StandardCharsets/UTF_8))
(spit "here.jpg" b)
(spit "here.jpg" (String. b))
b
(def b (DatatypeConverter/parseBase64Binary (slurp "dev/camera/1")))
(spit "here.jpg" (String. b java.nio.charset.StandardCharsets/UTF_8))
(def b (DatatypeConverter/parseBase64Binary "iVBORw0KGgoAAAANSUhEUgAAAPAAAADwCAYAAAA+VemSAAAgAEl...=="))
(spit "here.jpg" (String. b java.nio.charset.StandardCharsets/UTF_8))
(def b (DatatypeConverter/parseBase64Binary (.getBytes "iVBORw0KGgoAAAANSUhEUgAAAPAAAADwCAYAAAA+VemSAAAgAEl...==")))
(def b (DatatypeConverter/parseBase64Binary (slurp "dev/camera/1")))
(def b (DatatypeConverter/parseBase64Binary (.getBytes (slurp "dev/camera/1"))))
(slurp "dev/camera/1")
(clojure.string/trim-newline (slurp "dev/camera/1"))
(def b (DatatypeConverter/parseBase64Binary (clojure.string/trim-newline (slurp "dev/camera/1"))))
(spit "here.jpg" (String. b java.nio.charset.StandardCharsets/UTF_8))
(spit "here.jpg" (String. b))
(spit "here.jpg" (String. b java.nio.charset.StandardCharsets/UTF_8))
(count (String. b java.nio.charset.StandardCharsets/UTF_8))
(def s (String. b java.nio.charset.StandardCharsets/UTF_8))
(spit "here.jpg" s)
(io/copy b (java.io.File. "here.jpg"))
(def b (decode (.getBytes (slurp "dev/camera/1") java.nio.charset.StandardCharsets/UTF_8)))
(io/copy b (java.io.File. "here.jpg"))
(def b (decode (.getBytes (slurp "dev/camera/1"))))
(io/copy b (java.io.File. "here.jpg"))
(def b (DatatypeConverter/parseBase64Binary (slurp "dev/camera/1")))
(io/copy b (java.io.File. "here.jpg"))
(import [javax.xml.bind DatatypeConverter])
(curiosity/save )
(curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"})
(->> (curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"}) (curiosity/save "."))
*e
(->> (curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"}) (curiosity/save "."))
(->> (curiosity/capture {1 "MastCam" 2 "ChemCam" 3 "navcams" 4 "hazcams"}) (curiosity/save "./mission/"))
(clojure.java.io/resource "1")
(clojure.java.io/resource "camera/1")
(clojure.java.io/resource "1")
(clojure.java.io/resource "camera/1")
(clojure.java.io/resource "1")
(clojure.java.io/resource "config.edn")
(sulrp "config.edn")
(slurp "config.edn")
(slurp "resources/config.edn")
(require '[clojure.edn :as edn])
(edn/read-string (slurp "resources/config.edn"))
(pprint (edn/read-string (slurp "resources/config.edn")))
(def config (edn/read-string (slurp "resources/config.edn")))
(pprint config)
config
(pprint config)
(require '[mission])
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
(def config (edn/read-string (slurp "resources/config.edn")))
(require '[clojure.edn :as edn])
(def config (edn/read-string (slurp "resources/config.edn")))
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(require '[clojure.edn :as edn])
(def config (edn/read-string (slurp "resources/config.edn")))
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(require '[taoensso.nippy :as nippy])
(nippy/freeze [])
(nippy/freeze ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
(require '[clojure.core.async :as a])
(def c (a/chan))
(source deep-space/send-event)
(deep-space/send-event c (nippy/freeze ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"]))
(a/<!! c)
(def config (edn/read-string (slurp "resources/config.edn")))
(require '[clojure.edn :as edn])
(def config (edn/read-string (slurp "resources/config.edn")))
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(def config (mission/load-config "resource/config.edn"))
(def config (mission/load-config "resources/config.edn"))
(pprint config)
(mission/execute config ["forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
(mission/execute config ["go forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(def config (mission/load-config "resources/config.edn"))
(mission/execute config ["go forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
*e
(mission/execute config ["go forward 100 meters" "turn right 42 degrees" "go forward 28.2 meters"])
(mission/execute config {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def m (mission/execute config {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"}))
(:stop m)
((:stop m))
(def m (mission/execute config {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"}))
((:stop m))
(def config (mission/load-config "resources/config.edn"))
(def m (mission/execute config {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"}))
(def config (mission/load-config "resources/config.edn"))
(def commands {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config commands))
((:shutdown find-life))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
((:shutdown find-life))
(pprint config)
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def find-life (mission/execute config directions))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(pprint config)
(def find-life (mission/execute config directions))
*e
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
*e
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
((:shutdown find-life))
(.invoke (:shutdown find-life))
(:shutdown find-life)
(def find-life (mission/execute config directions))
((:shutdown find-life))
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
((:shutdown find-life))
(pprint config)
(def config (mission/load-config "resources/config.edn"))
(pprint config)
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
(def directions {1 "go forward 100 meters" 2 "turn right 42 degrees" 3 "go left 42.2 meters"})
(def find-life (mission/execute config directions))
(pprint config)
rm -rf /jpl/mission/report/*
(def find-life (mission/execute config directions))
(def c {:hubble {:server {:port 4242}
          :store {:url "spacecraft://tape"}
          :camera {:mode "mono"}
          :mission {:target "Eagle Nebula"}
          :log {:enabled false              ;; can be overridden at startup / runtime / consul, etc.
                :auth-token "OVERRIDE ME"
                :name "hubble-log"
                :hazelcast {:hosts "OVERRIDE ME"
                            :group-name "OVERRIDE ME"
                            :group-password "OVERRIDE ME"
                            :retry-ms 5000
                            :retry-max 720000}}
          :vault {:url "OVERRIDE ME"}}})
(pprint c)
(get-in c [:hubble :log :hazecast :hosts])
(get-in [:hubble :log :hazecast :hosts] v)
(get-in [:hubble :log :hazecast :hosts] c)
(get-in c [:hubble :log :hazelcast :hosts])
(pprint c)
(get-in c [:hubble :log :hazelcast :hosts])
(defn wrap-cookies [routes]
  {:with-cookies routes})
(defn wrap-params [routes]
  {:with-params routes})
(defn wrap-exception-handling
  [handler]
  (fn [request]
    (try
      (handler request)
      (catch Exception e
        {:status 500 :body (str "Oops.." e)}))))
(defn web-app [routes]
  (-> routes
      wrap-cookies
      wrap-params
      wrap-exception-handling))
(web-app {:GET {"/" (rand-int 42)}})
(web-app [{:GET {"/" (rand-int 42)} {:POST {"/make-money" (str "made $1 dollar")}}])
(web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}])
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) {})
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) 42)
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]))
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) {})
(defn wrap-cookies [handler]
  (fn [request]
    (-> (assoc request :cookies {"session_id" {:value (rand-int 42)}}) ;; pretend to parse cookies from request
        handler)))
(defn wrap-params [handler]
  (fn [request]
    (-> (assoc request :params {:name "Bond" :agent-number "007"})     ;; pretend to parse (POST/GET) params from request
        handler)))
(defn wrap-exception-handling
  [handler]
  (fn [request]
    (try
      (handler request)
      (catch Exception e
        {:status 500 :body (str "Oops.." e)}))))
(defn web-app [routes]
  (-> routes
      wrap-cookies
      wrap-params
      wrap-exception-handling))
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]))
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) {})
(defn wrap-exception-handling
  [handler]
  (fn [request]
    (try
      (handler request)
      (catch Exception e
        {:status 500 :body (str "oops.. :" e)}))))
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) {})
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) 1)
(defn web-app [routes]
  (-> routes
      wrap-cookies
      wrap-params))
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) 1)
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) {})
*e
(rand-int 42)
(defn wrap-cookies [handler]
  (fn [request]
    (println "req:" request)
    (-> (assoc request :cookies {"session_id" {:value (rand-int 42)}}) ;; pretend to parse cookies from request
        handler)))
((web-app [{:GET {"/" (rand-int 42)}} {:POST {"/make-money" (str "made $1 dollar")}}]) {})
(def config (mission/load-config "resources/config.edn"))
(def directions {1 "go forward 100 meters"
                    2 "turn right 42 degrees"
                    3 "go forward 28.2 meters"})
(def find-life (mission/execute config directions))
(pprint c)
(def config (mission/load-config "resources/config.edn"))
(pprint config)
